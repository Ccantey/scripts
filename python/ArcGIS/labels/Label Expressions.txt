### PYTHON LABEL EXPRESSIONS ###

###Format a label with thousands separator
###normally "{:,}".format(1000000) would return 1,000,000
###but we must cast the object, ie: "{:,}".format(int([numberfield] ))
def FindLabel ( [hse2012-1.DISTRICT],['population estimates mapping$'.2016HousePop]  ):
  a = [hse2012-1.DISTRICT] 
  b = "{:,}".format(int( ['population estimates mapping$'.2016HousePop] ))
  return a +'\n' + b

  ## ATTN: you might get "invalid literal for int() with base 10
  ## in which case, you must cast as a float first:

def FindLabel ( [hse2012-1.DISTRICT],['population estimates mapping$'.2016HousePop]  ):
  a = [hse2012-1.DISTRICT] 
  b = "{:,}".format(int( float(['population estimates mapping$'.2016HousePop]) ))
  return a +'\n' + b

#### Find string and Replace 
#### 'string'.replace('old', 'new')
def FindLabel ( [FULLNAME] ):
  return [FULLNAME].replace('County Road', 'CR')

#### Parse a string based on some conditions
## example attrbutes
Brainard P-1 W-4
Brainard P-1 W-5
Brainard Twp
Brainard P-2

import re
def FindLabel ( [PCTNAME] ):
  a = [PCTNAME]
  if 'W-' in a and 'P-' in a:
    full = a.split('W-')[1]
    return 'W- '+full
  elif 'W-' in a and 'P-' not in a:
    ward = a.split('W-')[1]
    return 'W- '+ ward
  elif 'P-' in a and 'W-' not in a:
    precinct = a.split('P-')[1]
    return 'P- '+precinct
  else:
    return a

#### Parse a PLSS string, ex: "W146T0200N0020E"
def FindLabel ( [lndkey],  [sectionkey] ):
  s = [lndkey] .split('T0',1)[1]
  twp = s.split('0N',1)[0] 
  r = s.split('0N',1)[1]
  range = r.split('0E',1)[0]
  #return [sectionkey]
  return 'Twp ' +twp +'\n Range ' + range + '\nSection ' + [sectionkey] 

#### Strip a two word name (ex: Minneapolis City) of its appendage  
def FindLabel ( [mcdbyzip.csv.name] ):
  a = [mcdbyzip.csv.name] 
  if 'City' in a: 
    cleanA = a.rsplit(' City')[0]  
    return cleanA
  if 'Township' in a:
    cleanA = a.rsplit(' Township')[0]  
    return cleanA
  if 'Unorganized' in a:
    cleanA = a.rsplit(' Unorganized')[0]  
    return cleanA


#### Remove all words after 1st word (ex: label address number only from "421 S Fourth St" == "421")
def FindLabel ( [Adddress] ):
  try:
     s = [Adddress].split(' ')
     return s[0]
  except:
    pass
    
##### Strip leading zeros
def FindLabel ( [UNIQUE_NO] ):
  return [UNIQUE_NO].lstrip("0") #.strip removes all zeros

#### Return file name with directory and file type removed (ex: S:\EngBB\Maps & Drawings\Plats\Assessors Plats\Recorded\Plat No 1.pdf == Plat No 1
def FindLabel ( [ASSESSORSPLAT] ):
  pre = [ASSESSORSPLAT] .split("S:\EngBB\Maps & Drawings\Plats\Assessors Plats\Recorded\\")
  post = pre[1].split('.')
  return post[0]

#### Remove all words after 1st word, replace with "lake" 
def FindLabel ( [NAME] ):
 s= [NAME].rsplit(' ',1)[0] + '\n' + 'Lake'
 return s

#### Remove all words after Space, append text("station" in this case) at end
def FindLabel ( [Name]  ):
 s= [Name] .split(' ',1)[0] + ' Station'
 return s

##### Remove 1st word, space, 2nd word, space
def FindLabel ([Legend] ):
 s= [Legend].split(' ',2 )[-1]
 return s

#### Remove all words after comma
def FindLabel ( [SOILDESC]  ):
 s= [SOILDESC] .rsplit(',',1)[0] 
 return s

##### Remove "unnamed" lakes
def FindLabel ( [NAME] ):
  if [NAME] == "Unnamed":
    return ''
  else:  
    return [NAME]

##### Same w/'lakes'
def FindLabel ( [NAME] ):
  s = [NAME] 
  if s == "Unnamed":
    return ''
  else:  
    s = s + '\n' + 'Lake'
    return s

#### Remove unnamed and those bigger than X
def FindLabel ( [NAME], [WATERAREA]  ):
  s = [NAME] 
  a = float( [WATERAREA] )
  if s == "Unnamed":
    return ''
  if a < 400:
   return ''
  else:
    s = s + '\n' + 'Lake'
    return s

#### Quick formatting to add commas in number with > 4 digits
def FindLabel ( [SOME_NUMERIC_FIELD]  ):
  return  "{:,}".format(int( [SOME_NUMERIC_FIELD] ))